{"version":3,"sources":["utils.js","App.jsx","reportWebVitals.js","index.js"],"names":["getFullPriceWithFormat","price","expectedFormats","format","indexOf","toFixed","getDeadlineTime","workMinutes","minutesWorked","current","Date","getHours","getDay","setTime","getTime","App","useState","language","seLanguage","inputText","setinputText","hours","minutes","date","month","year","deadline","setDeadline","cost","setCost","letterCount","length","priceOfLanguage","getPriceOfLanguage","fullPriceWithFormat","Math","trunc","getWorkDuration","deadlineTime","console","log","onLanguageChange","e","target","value","useEffect","getMinutes","getDate","getMonth","getFullYear","prevState","className","onSubmit","preventDefault","type","placeholder","style","width","height","onChange","checked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a2447d0.chunk.js","sourcesContent":["export const getPriceOfLanguage = (language, letterCount) => {\r\n  if (language === \"en\") {\r\n    const cost = letterCount * 0.12;\r\n    return cost < 120 ? 120 : cost;\r\n  } else if (language === \"ua\" || language === \"ru\") {\r\n    const cost = letterCount * 0.05;\r\n    return cost < 50 ? 50 : cost;\r\n  }\r\n};\r\n\r\nexport const getFullPriceWithFormat = (price, expectedFormats, format) => {\r\n  return expectedFormats.indexOf(format) !== -1\r\n    ? price.toFixed(2)\r\n    : (price * 1.2).toFixed(2);\r\n};\r\n\r\nexport const getWorkDuration = (language, letterCount) => {\r\n  if (language === \"en\") {\r\n    return Math.trunc(letterCount / (333 / 60) + 30);\r\n  } else if (language === \"ua\" || language === \"ru\") {\r\n    return Math.trunc(letterCount / (1333 / 60) + 30);\r\n  }\r\n};\r\n\r\nexport const getDeadlineTime = (workMinutes) => {\r\n  let minutesWorked = 0;\r\n  const current = new Date();\r\n  const workHoursStart = 10;\r\n  const workHoursEnd = 19;\r\n\r\n  while (minutesWorked < (workMinutes < 90 ? 90 : workMinutes)) {\r\n    if (\r\n      current.getHours() >= workHoursStart &&\r\n      current.getHours() < workHoursEnd &&\r\n      current.getDay() !== 0 &&\r\n      current.getDay() !== 6\r\n    ) {\r\n      minutesWorked++;\r\n    }\r\n    current.setTime(current.getTime() + 1000 * 60);\r\n  }\r\n  return current;\r\n};\r\n","import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  getPriceOfLanguage,\n  getFullPriceWithFormat,\n  getWorkDuration,\n  getDeadlineTime,\n} from \"./utils\";\n\nfunction App() {\n  const [language, seLanguage] = useState(\"ua\");\n  const [inputText, setinputText] = useState(\"\");\n  const [deadline, setDeadline] = useState({\n    hours: 0,\n    minutes: 0,\n    date: 0,\n    month: 0,\n    year: 0,\n  });\n  const [cost, setCost] = useState(\"\");\n\n  const format = \".docx\";\n  const letterCount = inputText.length;\n  const expectedFormats = [\".doc\", \".docx\", \".rtf\"];\n\n  const priceOfLanguage = getPriceOfLanguage(language, letterCount);\n  const fullPriceWithFormat = getFullPriceWithFormat(\n    priceOfLanguage,\n    expectedFormats,\n    format\n  );\n\n  const workMinutes = getWorkDuration(language, letterCount);\n  const deadlineTime = getDeadlineTime(workMinutes);\n\n  console.log(deadlineTime);\n  const onLanguageChange = (e) => {\n    seLanguage(e.target.value);\n    getFullPriceWithFormat(priceOfLanguage, expectedFormats, format);\n    getDeadlineTime(workMinutes);\n  };\n\n  const onTextChange = (e) => {\n    setinputText(e.target.value);\n    getFullPriceWithFormat(priceOfLanguage, expectedFormats, format);\n    getDeadlineTime(workMinutes);\n  };\n\n  useEffect(() => {\n    setCost(fullPriceWithFormat);\n  }, [fullPriceWithFormat]);\n\n  const hours = deadlineTime.getHours();\n  const minutes = deadlineTime.getMinutes();\n  const date = deadlineTime.getDate();\n  const month = deadlineTime.getMonth() + 1;\n  const year = deadlineTime.getFullYear();\n\n  useEffect(() => {\n    setDeadline((prevState) => {\n      return {\n        ...prevState,\n        hours: hours,\n        minutes: minutes,\n        date: date,\n        month: month,\n        year: year,\n      };\n    });\n  }, [hours, minutes, date, month, year]);\n\n  const formSubmit = (e) => {\n    e.preventDefault();\n    console.log(language);\n  };\n\n  return (\n    <div className=\"App\">\n      <h2>Замовити Редагування</h2>\n      <p>\n        Виправимо всі помилки, приберемо всі дурниці, перефразуємо невдалі\n        місця, але сильно текст не переписуватимемо. Зайвих виправлень не буде.\n      </p>\n      <form onSubmit={formSubmit}>\n        <input type=\"email\" placeholder=\"Enter your email\" />\n        <input type=\"text\" placeholder=\"Enter your name\" />\n        <br />\n        <textarea\n          type=\"text\"\n          style={{ width: \"300px\", height: \"300px\" }}\n          onChange={onTextChange}\n          placeholder=\"Enter your text\"\n        />\n        <br />\n        <h3>Character number: {inputText.length} </h3>\n        <h3>Мова</h3>\n        <div>\n          <label>\n            <input\n              type=\"radio\"\n              value=\"ua\"\n              checked={language === \"ua\"}\n              onChange={onLanguageChange}\n            />\n            Українська\n          </label>\n        </div>\n        <div>\n          <label>\n            <input\n              type=\"radio\"\n              value=\"ru\"\n              checked={language === \"ru\"}\n              onChange={onLanguageChange}\n            />\n            Російська\n          </label>\n        </div>\n        <div>\n          <label>\n            <input\n              type=\"radio\"\n              value=\"en\"\n              checked={language === \"en\"}\n              onChange={onLanguageChange}\n            />\n            Англійська\n          </label>\n        </div>\n      </form>\n\n      <div>\n        <h2>Ціна: {cost} грн </h2>\n        <h2>\n          Термін виконання: {deadline.hours} : {deadline.minutes}\n          <br />\n          {deadline.date} : {deadline.month} : {deadline.year}\n        </h2>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}